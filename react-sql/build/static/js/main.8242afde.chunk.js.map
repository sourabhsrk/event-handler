{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["moment","require","App","state","events","event","event_name","event_id","event_date","event_detail","rgsEvent","id","name","rgsNames","respNames","getEvents","_","fetch","then","response","json","setState","data","catch","err","console","error","addEvent","regEvent","ok","alert","log","fetchRGS","renderEvents","key","format","fetchNames","rgs_name","this","className","src","logo","alt","map","value","onChange","e","target","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.8242afde.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst moment = require('moment');\n\nclass App extends Component {\n  state = {\n    events: [],\n    event: {\n      event_name: 'event name',\n      event_id: 'event id',\n      event_date: 'event date',\n      event_detail: 'event detail'\n    },\n    rgsEvent: {\n      id: 1,\n      event_id: 101,\n      name: 'your name'\n    },\n    rgsNames: {\n      event_id: 101,\n      respNames: []\n    }\n  }\n\ncomponentDidMount(){\n  this.getEvents();\n  this.fetchRGS();\n}\n  \ngetEvents = _ => {\n  fetch('http://localhost:4000/events')\n   .then(response => response.json())\n   .then(response => this.setState({ events: response.data}))\n   .catch(err => console.error(err))\n  }\n\naddEvent = _ => {\n  const { event } = this.state;\n  fetch(`http://localhost:4000/events/add?id=${event.event_id}&name=${event.event_name}&date=${event.event_date}&detail=${event.event_detail}`)\n    .then(this.getEvents)\n    .catch(err => console.error(err))\n}\n\nregEvent = _ => {\n  const { rgsEvent } = this.state;\n  fetch(`http://localhost:4000/events/rgs?id=${rgsEvent.id}&event_id=${rgsEvent.event_id}&name=${rgsEvent.name}`)\n    .then(response => {\n      if(response.ok){\n        alert('successfully registered');\n        console.log(\"successfully registered\");\n      }\n    })\n    .catch(err => console.error(err))\n}\n\nfetchRGS = _ => {\n  const { rgsNames } = this.state;\n  fetch(`http://localhost:4000/events/event-rgs?event_id=${rgsNames.event_id}`)\n    .then(response => response.json())\n    .then(response => this.setState({ rgsNames: { respNames: response.data } }))\n    .catch(err => console.error(err))\n}\n\nrenderEvents = ({event_id,event_name,event_detail,event_date}) => <div key={event_id}>{event_name} {event_detail}  {moment(event_date).format(\"DD-MM-YYYY\")} </div>\n\nfetchNames = ({rgs_name}) => <div key={rgs_name}> {rgs_name} </div>\n\n\nrender(){\n const {events,event,rgsEvent,rgsNames} = this.state;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src ={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-title\">welcome to Sourabhsrk project</h1>\n      </header>\n      { events.map(this.renderEvents)}\n      <div>\n        <input \n          value={event.event_id} \n          onChange={e => this.setState({ event: { ...event, event_id: e.target.value }})} />\n        <input \n          value={event.event_name}\n          onChange={e => this.setState({ event: { ...event, event_name: e.target.value }})} /> \n        <input \n          value={event.event_date}\n          onChange={e => this.setState({ event: { ...event, event_date: e.target.value }})} /> \n        <input \n          value={event.event_detail}\n          onChange={e => this.setState({ event: { ...event, event_detail: e.target.value }})} />\n        <button onClick={this.addEvent}>Add Event </button>\n      </div>\n      <div>\n        <input \n          value={rgsEvent.id}\n          onChange={e => this.setState({ rgsEvent: { ...rgsEvent, id: e.target.value }})} />\n        <input \n          value={rgsEvent.event_id}\n          onChange={e => this.setState({ rgsEvent: { ...rgsEvent, event_id: e.target.value }})} />\n        <input \n          value={rgsEvent.name}\n          onChange={e => this.setState({ rgsEvent: { ...rgsEvent, name: e.target.value }})} />\n        <button onClick={this.regEvent}>OK </button>\n      </div>\n      <div>\n        <input \n          value={rgsNames.event_id}\n          onChange={e => this.setState({ rgsNames: { ...rgsNames, event_id: e.target.value }})} />\n        <button \n          onClick={()=>this.fetchRGS}> OK </button>\n        {rgsNames.respNames.map(this.fetchNames)} \n      </div>\n    </div>\n            \n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}